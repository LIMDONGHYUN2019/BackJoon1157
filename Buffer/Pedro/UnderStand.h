#pragma once
/*
	FillConsoleOutputCharacter(GetStdHandle(STD_OUTPUT_HANDLE), ' ', 81 * 24, { 0, 0 }, &dw);
	//이 함수는 특정 문자로 칸을 채우는 함수이다.
	//첫번쨰 인자는 출력 핸들값.
	//두번쨰 인자는 원하는 문자
	//세번쨰 인자는 원하는 넓이
	//네번쨰 인자는 원하는 커서부터
	//마지막 인자는 넓이를 반환할곳. 여기서는 100 * 100 인 즉, 10000을 반환하지만 콘솔창 넓이를 넘진않는다.
	//그리고 dw는 unsigned long이기 떄문에 4바이트이다. 32비트 os는
	//64비트는 8바이트이다. 주의하자.
	//화면 지우기용으로 정말 적합하다.
	//하지만 가장 중요한것이 이것은 출력의 글자들을 지우는 것이지 모든것을 지우고 맨처음으로
	//돌아가는것이 아니다. 그러므로 이 함수을 쓰고 맨처음으로 좌표를 가리키게끔 다시 설정을 해야한다.


	//다시한번 말하지만 FillConsoleOutputCharacter 이 함수는 지정 좌표에 n개의 글자를 보여주는것이다.
	//만약 81 * 24이렇게 크기를 넣는다고 해서 이것이 2차배열  처럼 처리를 하는게 절대 아니다....
	//주의하자 동현아.

	==================================================================================

	SetConsoleCursorPosition(hConsole, stCoord);
	//콘솔 화면 버퍼의 커서위치를 설정한다.
	//첫번쨰 인자는 핸들값.
	//두번쨰 인자는 커서의 좌표.

	==================================================================================

		CONSOLE_CURSOR_INFO stConsoleCursor; 	// 화면의 커서를 안보이게끔 설정한다.
	// 첫번쨰 인자는 커서가 보여지게끔하는 퍼센트 높을수록 100기준으로 보여준다.
	// 두번쨰 인자는 이 커서를 보여줄지 말지의 BOOL타입의 Flag이다.

	//-------------------------------------------------------------

	//-------------------------------------------------------------
	stConsoleCursor.bVisible = FALSE; // 보이게 할것이냐.
	stConsoleCursor.dwSize = 1;			// 커서 크기.
											// 이상하게도 0 이면 나온다. 1로하면 안나온다.
	//커서로 채워지는 캐릭터 칸의 퍼센트지를 나타내는것. 1 ~ 100 사이의 값.

	//-------------------------------------------------------------
	// 콘솔화면 (스텐다드 아웃풋) 핸들을 구한다.
	//-------------------------------------------------------------
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE); //인수로 표준 출력 장치를 뜻하는데  지정된 표준장치에 대한 핸들을 검색이다.
	//이 함수가 성공 반환값은 지정된 장치에 대한 핸들이다. 실패하면 INVALID_HANDLE_VALUE 라는 값이 나온다.
	SetConsoleCursorInfo(hConsole, &stConsoleCursor); //지정된  콘솔 화면 버퍼의 커서에 대해 설정한다.  사이즈와 시정을 정하는 함수
	// 첫번쨰 인자는 콘솔 스크린의 핸들 /  두번쨰 인자는 어느 콘솔창의 커서를 정의 하기위한 CONSOLE_CURSOR_INFO구조체의 포인터.
	// 구조체 형식으로 되어 있는데
	/*
		BOOL
		WINAPI
		SetConsoleCursorInfo(
			_In_ HANDLE hConsoleOutput,
			_In_ CONST CONSOLE_CURSOR_INFO * lpConsoleCursorInfo
		);
*/